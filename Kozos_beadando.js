const gamearea = document.querySelector('#gamearea')

///////////////////////////////////////////////////
//Teszt adatsorok
const arr = [
    [[3, 4], [4, 4], [5, 4]],
    [[1, 2], [1, 3]],
    [[9, 8], [8, 8], [7, 8], [6, 8]]
]

const arr1 = {
    harom: {
        x: [3, 4, 5],
        y: [4, 4, 4]
    }
}

const boats = {
    tizes: [5, 4, 3, 3, 2],
    nyolcas: [4, 3, 3, 2],
    hatos: [4, 3, 2],
    negyes: [3, 3, 2]
}
const arrTest = [[3, 4], [2, 4]]
const array = [[3, 4], [4, 2], [8, 9], [1, 3]]
const ures = []

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Ez a f√ºggv√©ny a bemeneti t√°blam√©rett≈ël f√ºgg≈ëen legener√°l egy haj√≥list√°t, amely a haj√≥k m√©ret√©t tartalmazza
function generateBoatLength(rowSize,colSize) {
    let sum = 0
    let listOfBoatLength = []
    while (sum < (rowSize*colSize*0.17)) {
        let number = random(4) + 2
        sum = sum + number
        listOfBoatLength.push(number)
    }
    listOfBoatLength.sort()
    listOfBoatLength.reverse()
    return listOfBoatLength
}



/////////////////////////////////////////////////////////////////////////////////////
// Itt van az a lista, amelyen pr√≥b√°lkoztam, de a k√©s≈ëbbiekben egy m√°sik f√ºggv√©ny csin√°lja ezt
const order = [5, 4, 3, 3, 2]

// random f√ºggv√©ny
function random(max) {
    return Math.floor(Math.random() * (max))
}

// Ez a f√ºggv√©ny megn√©zi, hogy egy list√°k list√°j√°ban (array) van-e olyan koordin√°ta p√°r, ami az arrTest-ben benne van
// Ett≈ël f√ºgg≈ëen, ha van akkor igazat ad vissza, ha nincs akkor hamisat
function ArrayIsInArrayArray(arrayOriginal, arrTest) {
    let exit = false
    for (indexPairOfOriginal of arrayOriginal) {

        for (indexPairOfTest of arrTest) {


            if (indexPairOfOriginal[0] == indexPairOfTest[0] && indexPairOfOriginal[1] == indexPairOfTest[1]) {
                exit = true
                break
            }
        }
        if (exit) {
            break
        }
    }
    return exit
}


// Ez egy √©rtelmetlen f√ºggv√©ny: fog egy list√°k list√°j√°t √©s minden egyes list√°j√°t belerakja egy eredeti list√°ba 
// A v√©geredm√©ny egy list√°k list√°ja (ezt meglehtne oldani valahogy eleg√°nsabban de nem siker√ºlt)
function BelePussolo(arrTemporary, arrOriginal) {
    for (i of arrTemporary) {
        arrOriginal.push(i)
    }
}


// Ez egy i hossz√∫s√°g√∫ kezd≈ë indexp√°r√∫ √©s v√©gs≈ë indexp√°r≈± haj√≥t t√∂lt fel
//teh√°t a kezd≈ë n√©gyzett≈ël a v√©gs≈ë n√©gyzetig felt√∂lti a cell√°kat
function generateShipFromStartAndEnd(boatLength, startOfShipRow, startOfShipCol, endOfShipRow, endOfShipCol) {
    let boat = []
    if (startOfShipCol - endOfShipCol == 0) {
        if (startOfShipRow - endOfShipRow > 0) {
            for (let i = 0; i < boatLength; i++) {
                boat.push([endOfShipRow + i, endOfShipCol])
            }
        }
        else {
            for (let i = 0; i < boatLength; i++) {
                boat.push([startOfShipRow + i, endOfShipCol])
            }
        }
    }

    if (endOfShipRow - startOfShipRow == 0) {
        if (startOfShipCol - endOfShipCol > 0) {
            for (let i = 0; i < boatLength; i++) {
                boat.push([endOfShipRow, endOfShipCol + i])
            }
        }
        else {
            for (let i = 0; i < boatLength; i++) {
                boat.push([startOfShipRow, startOfShipCol + i])
            }
        }
    }
    return boat
}

// A legjobb: Ez legener√°lja az eg√©szet, szerintem lehetne rajta finom√≠tani, hogy mindig m√°s if sorrendekkel hajtsa v√©gre
// Ez fog egy kezd≈ë index p√°rt, majd az adott hosszban, ahol lehets√©ges megadja a v√©gs≈ë indexp√°rt is
// Ezek ut√°n felt√∂lti a kett≈ë k√∂z√∂tti n√©gyzeteket haj√≥kkal 
// Majd leelen≈ërzi, hogy ezeket a n√©gyzeteket haszn√°ltuk-e m√°r
// Ha igen, akkor ugyan√∫gy legener√°lja 
// Ha nem, akkor hozz√°f≈±zi az eredeti haj√≥ list√°hoz
// Az if-ek v√°ltozt√°s√°val el√©g sokat lehetne vari√°lni, de azt nem tudtam megoldani
//Itt pl az order eredeti haj√≥ list√°t param√©terk√©nt fogja kapni a f√ºggv√©ny √©s a 9-es sz√°mokat is param√©ter√ºl fogja kapni,
// a t√°bla m√©ret√©t≈ël f√ºgg≈ëen
// relat√≠ve sok a ciklus, ezen lehetne jav√≠tani, de ez √≠gy eddig nem rossz kiindul√°s
// Az √∂sszes console.log()-ot ki lehet szedni, a debuggolas miatt volt bent

function generateBoat(boatLengthList) {
    // a v√©gs≈ë haj√≥ lista
    let boats = []
    // az order a legelej√©n defini√°lt gakorl√≥ list√°m
    for (let i = 0; i < boatLengthList.length; i++) {
        // a v√°ltoz√≥kat l√©trehozom
        let temporaryBoat
        let stepIn = true
        let endOfShipCol
        let endOfShipRow
        let startOfShipRow
        let startOfShipCol
        let direction
        // Ameddig nincs megfelel≈ë kezd≈ë √©s v√©g indexp√°r addig folytatom a ciklust
        while (stepIn) {
            startOfShipRow = random(10)
            console.log(startOfShipRow)
            startOfShipCol = random(10)
            console.log(startOfShipCol)
            // itt az ir√°nyt randomiz√°lom, ez is seg√≠ti, hogy randomabb legyen az if-ek megh√≠v√°sa
            direction = random(2)
            if (direction == 0) {
                // Minden egyes if-n√©l megvizsg√°lom, hogy melyik ir√°nyban lehet az adott haj√≥t lerakni
                // Ha le lehet, akkor a v√©gs≈ë cell√°t lerakom, majd kil√©pek, √©s a while ciklusbol is kil√©ptetem magam
                if (9 - startOfShipCol > order[i]) {
                    endOfShipCol = startOfShipCol + order[i]
                    endOfShipRow = startOfShipRow
                    stepIn = false
                    break
                }
                if (startOfShipCol > order[i]) {
                    endOfShipCol = startOfShipCol - order[i]
                    endOfShipRow = startOfShipRow
                    stepIn = false
                    break
                }
            }
            else {
                if (9 - startOfShipRow > order[i]) {
                    endOfShipRow = startOfShipRow + order[i]
                    endOfShipCol = startOfShipCol
                    stepIn = false
                    break
                }
                if (startOfShipRow > order[i]) {
                    endOfShipRow = startOfShipRow - order[i]
                    endOfShipCol = startOfShipCol
                    stepIn = false
                    break
                }
            }
        }
        console.log(startOfShipRow, startOfShipCol, endOfShipRow, endOfShipCol)
        // l√©trehozom a kezd≈ë √©s v√©gcella k√∂z√∂tti cell√°kat, a haj√≥k hossz√°nak megfelel≈ëen
        temporaryBoat = generateShipFromStartAndEnd(boatLengthList[i], startOfShipRow, startOfShipCol, endOfShipRow, endOfShipCol)
        console.log(temporaryBoat)
        // itt azt vizsg√°lom, hogy az ideiglenes haj√≥m valakivel k√∂z√∂s cell√°t foglal-e
        // Ha nem, akkor belerakom a v√©gs≈ë list√°mba
        // Ha igen, akkor az eg√©sz for ciklust ujra futtatom, erre a hossz√∫s√°g√∫ haj√≥ra
        // (ugye a for n√∂veln√© az iter√°tort, de √©n abb√≥l levonok egyet akkor az megn√∂velve √∂nmaga)
        if (ArrayIsInArrayArray(boats, temporaryBoat)) {
            i = i - 1
        }
        else {
            BelePussolo(temporaryBoat, boats)
            console.log(boats)
            console.log("hej")
        }
    }
    return boats
}



// V√©ge van a haj√≥gener√°l√°snak
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////










function generateTable(row, col) {
    const table = document.createElement('table')

    for (let rowindex = 0; rowindex < row; rowindex++) {
        const tr = document.createElement('tr')
        for (let colindex = 0; colindex < col; colindex++) {
            const td = document.createElement('td')
            td.classList.add(`row${rowindex}`)
            td.classList.add(`col${colindex}`)
            tr.appendChild(td)
        }
        table.appendChild(tr)
    }
    gamearea.appendChild(table)
}


function getCell(row, col) {
    return gamearea.querySelector(`.row${row}.col${col}`)
}


function rajzol(x, y, talalt) {

    if (talalt) {
        getCell(x, y).innerText = 'üí•'
    }

}

function lepesSzamlaloIr(szam) {
    const lepesek = gamearea.querySelector('#lepesSzamlalo')
    lepesek.innerText = szam
}
function talalatSzamlaloIr(szam) {
    const talalat = gamearea.querySelector('#talalatSzamlalo')
    talalat.innerText = szam
}

let indexPairs = [
    { row: 5, col: 7 },
    { row: 4, col: 8 }
]

function indexTarol(row, col) {
    indexPairs.push({ row: row, col: col })
}